%Esercizio-Somma dei primi N interi positivi

sum(1, 1).
sum(N,Z) :- N1 is N-1, sum(N1, Z1), Z is Z1+N.

%Esercizio-Somma di due numeri naturali

sum1(X, 0, X).
sum1(0, X, X).
sum1(X, Y, Z) :- Y1 is Y-1, sum1(X, Y1, Z1), Z is Z1+1.

minimum1(X, Y, X) :- X=<Y.
minimum1(X, Y, Y) :- Y=<X.

%Esercizio-Numero di Erdos

coauthor(erdos, iacopo).
coauthor(iacopo, edo).
coauthor(edo, lore).
erdosnum(erdos, 0).
erdosnum(X, 1) :- coauthor(X, erdos).
erdosnum(X, 1) :- coauthor(erdos, X).
erdosnum(X, N) :- coauthor(C1, X), N1 is N-1, N1 > 0, erdosnum(C1, N1).
erdosnum(X, N) :- coauthor(X, C1), N1 is N-1, N1 > 0, erdosnum(C1, N1).
erd(X, N) :- tryerd(X, 0, 10, N).
tryerd(X, C, Max, N) :- N is C+1, N<Max, erdosnum(X, N).
tryerd(X, C, Max, N) :- C1 is C+1, C1<Max, tryerd(X, C1, Max, N).

%Esercizio-Numero di Erdos tra due autori

coauthor(erdos, iacopo).
coauthor(iacopo, edo).
coauthor(edo, lore).
erdosnum(X, X, 0).
erdosnum(X, Y, 1) :- coauthor(X, Y).
erdosnum(X, Y, 1) :- coauthor(Y, X).
erdosnum(X, Y, N) :- coauthor(C1, X), N1 is N-1, N1 > 0, erdosnum(C1, Y, N1).
erdosnum(X, Y, N) :- coauthor(X, C1), N1 is N-1, N1 > 0, erdosnum(C1, Y, N1).

erd(X, Y, N) :- tryerd(X, Y, 0, 10, N).

tryerd(X, Y, C, Max, N) :- N is C+1, N<Max, erdosnum(X, Y, N).
tryerd(X, Y, C, Max, N) :- C1 is C+1, C1<Max, tryerd(X, Y, C1, Max, N).

%exercises on lists

prefix1([], _Ys).
prefix1([X|Xs], [X|Ys]) :- prefix1(Xs, Ys).

%-------------------------------------------------------------------------------------------------------------------------

member1(X, [X|_]).
member1(X, [_|Ys]) :- member1(X, Ys).

%-------------------------------------------------------------------------------------------------------------------------

append1([], Y, Y).
append1([X|Xs], Y, [X|Zs]) :- append1(Xs, Y, Zs).

%-------------------------------------------------------------------------------------------------------------------------

reverse1([], []).
reverse1([X], [X]).
reverse1(Xs, [Z|Zs]) :- append1(Ys, [Z], Xs), reverse1(Ys, Zs).

%-------------------------------------------------------------------------------------------------------------------------

suffix1([], []).
suffix1([X|Xs], [X|Xs]).
suffix1([X|Xs], [_|Ys]) :- suffix1([X|Xs], Ys).

%-------------------------------------------------------------------------------------------------------------------------

subset1([], []).
subset1(_Xs, []).
subset1(Xs, [Y|Ys]) :- member1(Y, Xs), delete1(Y, Xs, Xn), subset1(Xn, Ys).

%-------------------------------------------------------------------------------------------------------------------------

intersection1([], _, []).
intersection1([X|Xs], Ys, [X|Zs]) :- member1(X, Ys), delete1(X, Ys, Yn), intersection1(Xs, Yn, Zs).
intersection1([_X|Xs], Ys, Zs) :- intersection1(Xs, Ys, Zs).

%-------------------------------------------------------------------------------------------------------------------------

sorting1(Xs, Ys) :- permutation1(Xs, Ys), ordered1(Ys).

ordered1([]).
ordered1([_]).
ordered1([X,Y|Zs]) :- X=<Y, ordered1([Y|Zs]).

permutation1([], []).
permutation1([X|Xs], Ys) :- delete1(X, Ys, Yn), permutation1(Yn, Xs).

delete1(X, [X|Xs], Xs).
delete1(X, [Y|Ys], [Y|Zs]) :- delete1(X, Ys, Zs).

%-------------------------------------------------------------------------------------------------------------------------

memberList(X, [[X|_Xs]|_Rest]).
memberList(X, [[_Y|Xs]|_Rest]) :- member1(X,Xs).
memberList(X, [_|Rest]) :- memberList(X, Rest).

%-------------------------------------------------------------------------------------------------------------------------

%istanza di prova tree(3, (tree(4, tree(7,void, void),tree(9, void, void))), tree(5, tree(11, void, void),tree(80,void, void)))

binarytree(void).
binarytree(tree(_X, Left, Right)) :- binarytree(Left), binarytree(Right).

isomorphic(void,void).
isomorphic(tree(X, Left1, Right1), tree(X, Left2, Right2) :- isomorphic(Left1, Left2),
           													   isomorphic(Right1, Right2).
															  
%-------------------------------------------------------------------------------------------------------------------------

preorder(void, []).
preorder(tree(X, void, void), [X]).
preorder(tree(X, Left, Right), Y) :- preorder(Left, L), preorder(Right, R), append1([X|L], R, Y).

%-------------------------------------------------------------------------------------------------------------------------

evalExpression(plus(A,B), N) :- evalExpression(A, N1), evalExpression(B, N2), N is N1+N2.
evalExpression(minus(A,B), N) :- evalExpression(A, N1), evalExpression(B, N2), N is N1-N2.
evalExpression(times(A,B), N) :- evalExpression(A, N1), evalExpression(B, N2), N is N1*N2.
evalExpression(quote(A,B), N) :- evalExpression(A, N1), evalExpression(B, N2), N is N1//N2.
evalExpression(X,X).

%-------------------------------------------------------------------------------------------------------------------------

listoflistlenght([], 0).
listoflistlenght([[]|Rest], N) :- listoflistlenght(Rest, N).
listoflistlenght([[_X|Y]|Rest], N) :- listoflistlenght([Y|Rest], N1),N is N1+1. 

%-------------------------------------------------------------------------------------------------------------------------

memberTree(X, tree(X, _Left, _Right)).
memberTree(X, tree(_Y, Left, _Right)) :- memberTree(X, Left).
memberTree(X, tree(_Y, _Left, Right)) :- memberTree(X, Right).

%-------------------------------------------------------------------------------------------------------------------------

depthnodes(void, _N, []).
depthnodes(tree(X, _Left, _Right), 0, [X]).
depthnodes(tree(_X, Left, Right), N, List) :-  N1 is N-1, depthnodes(Left, N1, List1), depthnodes(Right, N1, List2),
    										  append1(List1, List2, List).

%-------------------------------------------------------------------------------------------------------------------------

depthconstant(void, _Y, -1).
depthconstant(tree(X, _Left, _Right), X, 0).
%depthconstant(tree(_X, Left, Right), Y, N) :- depthconstant(Left, Y, N1), depthconstant(Right, Y, N2), minimum1(N1,N2, Nm), N is Nm+1.
depthconstant(tree(_X, Left, _Right), Y, N) :- depthconstant(Left, Y, N1), N1>=0, N is N1+1.
depthconstant(tree(_X, _Left, Right), Y, N) :- depthconstant(Right, Y, N1), N1>=0, N is N1+1.

%-------------------------------------------------------------------------------------------------------------------------

nthelement([X|_Rest], 0, X).
nthelement([_X|Rest], N, K) :- N1 is N-1, nthelement(Rest, N1, K).

%-------------------------------------------------------------------------------------------------------------------------

lenght1([], 0).
lenght1([_X|Rest], N) :- lenght1(Rest, N1), N is N1+1.

%-------------------------------------------------------------------------------------------------------------------------

deleteLast([], []).
deleteLast([_X], []).
deleteLast([X|Rest], [X|Result]) :- deleteLast(Rest, Result).

%N must be the lenght of the list-1
palindrome([], _N).
palindrome([_X], _N).
palindrome([X,X], _N).
palindrome([X|Rest], N) :- nthelement([X|Rest], N, Pal), X == Pal, deleteLast(Rest, List),palindrome(List, N-2).

palindrome([]).
palindrome([X]).
palindrome([X,X]).
palindrome([X|Rest]) :- last(Rest, Y), X == Y, deleteLast(Rest, List), palindrome(List).

%-------------------------------------------------------------------------------------------------------------------------

last1([X], X).
last1([_X|Rest], N) :- last1(Rest, N).

%-------------------------------------------------------------------------------------------------------------------------
%Write a PROLOG program that takes a lists representing numbers digit by digit and returns the number represented
%in the list. For example, given the list [3,8], the program should return 38
%FA SCHIFO
%L must be one at the beginning
idk([], 0, _L).
idk([X], N, L):- N == X*10^L.
idk(X, N, L):- last1(X, Last), deleteLast(X, List), idk(List, N1, L+1), N is N1+Last*10^(L-1).

digits([], 0, 0).
digits([X], X, 1).
digits([X|Rest], N, L) :- lenght1([X|Rest], L), L1 is L-1, digits(Rest, N1, L1), N is N1+X*10^(L-1).

%-------------------------------------------------------------------------------------------------------------------------
%Consider a data structure list, whose elements are lists of two atoms, such that the two atoms in each list are not equal (e.g. [[a,b],[c,d],[e,f]]), and call it LA

isLa([]).
isLa([[X,Y]|Rest]) :- X\==Y, isLa(Rest).

%-------------------------------------------------------------------------------------------------------------------------

makeLa([], []).
makeLa([[X,Y]|Rest], [[X,Y]| Z]) :- X\==Y, makeLa(Rest, Z).
makeLa([_X| Rest], Z) :- makeLa(Rest, Z).

makeLa([], []).
makeLa([X|Rest], [X|Restla]):- isLa([X]), makeLa(Rest, Restla).
makeLa([_X|Rest], [Restla]) :- makeLa(Rest, Restla).

%-------------------------------------------------------------------------------------------------------------------------

makelistoffirst([], []).
makelistoffirst([[X,_Y]|Rest], [X|Z]):- makelistoffirst(Rest, Z).

makelistofsecond([], []).
makelistofsecond([[_X,Y]|Rest], [Y|Z]):- makelistofsecond(Rest, Z).

member1(X, [X|_]).
member1(X, [_|Ys]) :- member1(X, Ys).

dup([X|Rest]):- member1(X, Rest).
dup([_|Rest]):- dup(Rest).

one2one([]).
one2one([[]]).
one2one([X,Y]).
one2one(X):- makelistoffirst(X,Firsts), makelistofsecond(X, Seconds),
    		not(dup(Firsts)), not(dup(Seconds)).

%-------------------------------------------------------------------------------------------------------------------------

getd([X|Rest], I, N):- getdRic([X|Rest], I, I, N).

getdRic([X|Rest], 0, 0, N).
getdRic([X|_Rest], 0, Iint, N) :- getdRic(X, I1, Iint, N).
getdRic([X|Rest], Iext, Iint, N) :- Iext\==0, I1 is Iext-1, getdRic(Rest, I1, Iint, N).

%-------------------------------------------------------------------------------------------------------------------------

nthelement([X|_Rest], 0, X).
nthelement([_X|Rest], N, K) :- N1 is N-1, nthelement(Rest, N1, K).

append1([], Xs, Xs).
append1([X|Rest], Xs, [X|Zs]):- append1(Rest, Xs, Zs).

getdiag(X, L):-getdiagRic(X, 0, L).
getdiagRic([], _, []).
getdiagRic([X|Rest], N, L) :- nthelement(X, N, K), getdiagRic(Rest, N+1, L1), append1([K], L1, L).

%-------------------------------------------------------------------------------------------------------------------------

getd([X|Rest], I, N):- getdRic([X|Rest], I, I, N), !.

getdRic([[X|Roba]|_Rest], 1, Iint, N) :- getdRic([X|Roba], 1, Iint, N).
getdRic([_X|Rest], 1, Iint, N) :- I1 is Iint-1, getdRic(Rest, 1, I1, N).
getdRic([_X|Rest], Iext, Iint, N) :- I1 is Iext-1, getdRic(Rest, I1, Iint, N).
getdRic([X|_Rest], 1, 1, X).

%pazzurda
getd(X, I, N):- nthelement(X, I, X1), nthelement(X1, I, N).

%-------------------------------------------------------------------------------------------------------------------------

deleteLast([], []).
deleteLast([_X], []).
deleteLast([X|Rest], [X|Result]) :- deleteLast(Rest, Result).

append1([], Xs, Xs).
append1([X|Rest], Xs, [X|Zs]):- append1(Rest, Xs, Zs).

last1([X], X).
last1([_X|Rest], N) :- last1(Rest, N).

sumList(X, Y, Result):- sumListRec(X, Y, 0, Result).

sumListRec([], [], CurRip, [CurRip]).
sumListRec([], Y, CurRip, Result):- last1(Y, Y1), sum1(0, Y1, CurRip, Ris, Rip), deleteLast(Y, ListY),
    								sumListRec([], ListY, Rip, Result1),
                                    append1(Result1, [Ris], Result).
sumListRec(X, [], CurRip, Result):- last1(X, X1), sum1(X1, 0, CurRip, Ris, Rip), deleteLast(X, ListX),
    								sumListRec(ListX, [], Rip, Result1),
                                    append1(Result1, [Ris], Result).
sumListRec(X, Y, CurRip, Result):- last1(X, X1), last1(Y, Y1), sum1(X1, Y1, CurRip, Ris, Rip), 
                                   deleteLast(X, ListX), deleteLast(Y, ListY),
                                   sumListRec(ListX, ListY, Rip, Result1),
                                   append1(Result1, [Ris], Result).                                                                                   

sum1(X, Y, CurRip, Ris, Rip) :-Ris is integer((X+Y+CurRip) mod 10), Rip is integer((X+Y+CurRip)//10).

%-------------------------------------------------------------------------------------------------------------------------

scalarbrodo([], [], 0).
scalarbrodo([X|Rest1], [Y|Rest2], N):- scalarbrodo(Rest1, Rest2, N1), N is (X*Y)+N1.

%-------------------------------------------------------------------------------------------------------------------------

%NON FUNZIONA
forbidden(Tree, List):- forbiddenRec(Tree, List, 0).

forbiddenRec(void, _List, N):- N=<1.
forbiddenRec(tree(X, Left, Right), List, N):- N=<1, member1(X, List), forbiddenRec(Left, List, N+1), !, forbiddenRec(Right, List, N+1).
forbiddenRec(tree(X, Left, Right), List, N):- N=<1, not(member1(X, List)),forbiddenRec(Left, List, N), !, forbiddenRec(Right, List, N).

forbidden(Tree, List):- forbiddenRec(Tree, List, 0).

forbiddenRec(void, _List, 0).
%forbiddenRec(tree(X, Left, Right), List, N):- N=<1, not(member1(X, List)),forbiddenRec(Left, List, N) ; forbiddenRec(Right, List, N).
forbiddenRec(tree(X, Left, Right), List, N):- forbiddenRec(Left, List, N2) ; forbiddenRec(Right, List, N2), member2(X, List, N1), N is N2+N1, N=<1.

%FUNZIONA
forbidden(Tree, List):- forbiddenRec(Tree, List, 0).

forbiddenRec(void, _List, N):- N=<1.
forbiddenRec(tree(X, Left, _Right), List, N):- N=<1, member1(X, List), N1 is N+1, forbiddenRec(Left, List, N1).
forbiddenRec(tree(X, _Left, Right), List, N):- N=<1, member1(X, List), N1 is N+1, forbiddenRec(Right, List, N1).
forbiddenRec(tree(X, Left, _Right), List, N):- N=<1, not(member1(X, List)),forbiddenRec(Left, List, N).
forbiddenRec(tree(X, _Left, Right), List, N):- N=<1, not(member1(X, List)),forbiddenRec(Right, List, N).

%-------------------------------------------------------------------------------------------------------------------------

len1([], 0).
len1([X|Rest], N):- len(Rest, N1), N is N1+1.

porco([], _N, []).
porco([X|Rest], N, [X|Z]):- len(X, L), L =< N, porco(Rest, N, Z).
porco(List, N, Z):- porco(Rest, N, Z).

%-------------------------------------------------------------------------------------------------------------------------

allGreater([], _N).
allGreater([X|Rest], N):- X>N, allGreater(Rest, N).

onlyGreater([], _N, []).
onlyGreater([X|Rest], N, [X|Z]):- allGreater(X, N), onlyGreater(Rest, N, Z).
onlyGreater([_X|Rest], N, Z):- onlyGreater(Rest, N, Z).

%-------------------------------------------------------------------------------------------------------------------------

isAl([]).
isAl([X|Rest]):- atom(X), isAl(Rest).

findt([], _A, void).
findt([[X,Y]|_Rest], X, Y):-!.
findt([[_X,_Y]|Rest], A, T):-findt(Rest, A, T).

subs([], _, []).
subs(_, [], []).
subs(X, [A|Rest], [A|Sub]):- findt(X, A, Z), Z == void, subs(X, Rest, Sub).
subs(X, [A|Rest], [Z|Sub]):- findt(X, A, Z), Z \== void, subs(X, Rest, Sub).

%-------------------------------------------------------------------------------------------------------------------------

path(tree(X, _Left, _Right), X, [X]).
path(tree(X, Left, _Right), Y, [X|Path]):- path(Left, Y, Path).
path(tree(X, _Left, Right), Y, [X|Path]):- path(Right, Y, Path).

%-------------------------------------------------------------------------------------------------------------------------

pathL(tree(X, _Left, _Right), X, 0).
pathL(tree(_X, Left, _Right), Y, N):- pathL(Left, Y, N1), N is N1+1.
pathL(tree(_X, _Left, Right), Y, N):- pathL(Right, Y, N1), N is N1+1.

%-------------------------------------------------------------------------------------------------------------------------